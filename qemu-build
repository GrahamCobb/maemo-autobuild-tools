#!/bin/bash
#
# qemu-build <packages>...
#
# <packages> should be a list of package names
#
# Note that some package names are special:
#
#  GPE - this is turned into the list of packages that make up GPE
#
# Options:
#
#   --dir <target>
#
#     target subdirectory of ~/v/sb-qemu/ to use for log and upload/
#
#     default is to use ~/v/sb-qemu itself
#
#   --release <release>
#
#     release version id.  Default is to leave it unchanged in the package files
#
#     <release> should be a release number in form <major>.<minor>-<debian-version>
#     or <major>.<minor>+ (the latter indicates the date should be included in the package version)
#
#   --date <date>
#
#     date to use for SVN fetches.  Default is "now"
#
#   --repo <address> <distribution> <component>
#
#     repository information to add to apt sources list
#
#     Note that this option must be followed by exactly three arguments.
#     This option can be specified more than once.  Each repository is added as two lines:
#
#     deb <address> <distribution> <component>
#     deb-src <address> <distribution> <component>
#
#   --install <package>
#
#     install a package before starting the build
#
#     The package is installed using "apt-get install <package>".  The build continues
#     if the installation fails.
#
#     This option can be specified more than once.
#
#   --expected <number>
#
#     expected number of .deb's.  If this is specified, the script will
#     check for the expected number and, if so, will create a file called
#     'completed' in the upload directory.
#
#   --quiet
#
#     do not show build log on stdout.  This is useful when building in cron
#     so the mail is not multi-megabytes!  Note that the build summary information
#     is still displayed.
#
#   --clean
#
#     remove previously installed packages.  This is useful when not building in
#     a clean environment and building a version earlier than previously built versions.
#
#   --sdk <codename>
#
#     specify codename for sdk, to pass to MUD.
#
#   --cont
#
#     continue a previous build
#     Note: the caller is responsible for having saved the ~/mud-builder/upload
#     directory if they want it, before calling this.  This option causes:
#     1) do not empty the target directory upload directory
#     2) install all packages lying around in mud-builder/upload
#     3) invokes mud with the --depend-nobuild option
#
# The upload directory is emptied and the packages are built using the specified date
#
# NOTE: must be in scratchbox environment.
#
# NOTE: all output files go in ~/v/sb-qemu... (see --target)
#

# Save qemu output
fifo=`tempfile`
rm $fifo
mkfifo $fifo
( tee <$fifo ~/v/sb-qemu/qemu-build-itself.log ; rm $fifo ) &
exec >$fifo 2>&1

echo "$0 started at `date`"

# Remember where the scripts live
export SCRIPTS=`dirname $0`
if [ "${SCRIPTS:0:1}" != "/" -a "${SCRIPTS:0:1}" != "~" ]
then
  SCRIPTS=`pwd`/$SCRIPTS
fi

target=""
release=""
date="now"
cont=""
expected=0
quiet=0
declare -a repos
install=""
clean=0
sdk=""
while [ "${1:0:1}" = "-" ]
do
  if [ "$1" = "--dir" ]
      then
      target="/$2"
      mkdir ~/v/sb-qemu$target
      shift 2
  elif [ "$1" = "--release" ]
      then
      release="$2"
      shift 2
  elif [ "$1" = "--date" ]
      then
      date="$2"
      shift 2
  elif [ "$1" = "--expected" ]
      then
      expected="$2"
      shift 2
  elif [ "$1" = "--quiet" ]
      then
      quiet=1
      shift
  elif [ "$1" = "--clean" ]
      then
      clean=1
      shift
  elif [ "$1" = "--cont" ]
      then
      cont="--depend-nobuild"
      shift
  elif [ "$1" = "--repo" ]
      then
      # repos is an array, so append to it
      repos=("${repos[@]}" "$2 $3 $4")
      shift 4
  elif [ "$1" = "--install" ]
      then
      install="$install $2"
      shift 2
  elif [ "$1" = "--sdk" ]
      then
      sdk="--sdk $2"
      shift 2
  else
      echo "$0: Unrecognised option: $1"
      exit 1
  fi
done

#
# Allow unauthenticated installations:
#
echo "APT::Get::AllowUnauthenticated 1 ;" >>/etc/apt/apt.conf

#
# Fremantle /opt hack
#
targetopt=`readlink /targets/links/opt`
if [ ! -d $targetopt ]
then
    rm $targetopt
    mkdir $targetopt
fi

#
# Add additional repositories
#
for r in "${repos[@]}"
  do
  if ! grep -F "$r" /etc/apt/sources.list >/dev/null 2>&1
  then
    echo "Adding $r to apt sources"
    echo "deb $r" >>/etc/apt/sources.list
    echo "deb-src $r" >>/etc/apt/sources.list
  else
    echo "apt sources already contains $r"
  fi
done

fakeroot apt-get update --quiet --quiet

#
# Install additional packages
#
fakeroot apt-get --yes -f install
if [ -n "$install" ]
then
  for p in "$install"
    do
    echo "Installing $p..."
    fakeroot apt-get --yes install $p
  done
fi
fakeroot apt-get --yes install subversion
fakeroot apt-get --yes install build-essential
fakeroot apt-get --yes install devscripts
fakeroot apt-get --yes install xsltproc
fakeroot apt-get --yes install sharutils
fakeroot apt-get --yes install maemo-optify

#
# Create mud-builder directory
#
if [ -z "$cont" ]
then
    if [ -e ~/mud-builder/packages.patch ]
    then
	echo "***** Refusing to delete the MASTER mud-builder directory *****"
	exit 999
    fi
    [ -d ~/mud-builder ] && rm -rf ~/mud-builder
fi
mkdir -p ~/.subversion/auth/svn.ssl.server
# Authorise certificate for SVN (this tends to expire around March/April each year)
cat <<EOF >~/.subversion/auth/svn.ssl.server/4b9e812f09b7593ee12edc05c2765913
K 10
ascii_cert
V 1480
MIIEUjCCA7ugAwIBAgIQT/lwiXknllWWf32wU7ptNDANBgkqhkiG9w0BAQUFADCBujEfMB0GA1UEChMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazEXMBUGA1UECxMOVmVyaVNpZ24sIEluYy4xMzAxBgNVBAsTKlZlcmlTaWduIEludGVybmF0aW9uYWwgU2VydmVyIENBIC0gQ2xhc3MgMzFJMEcGA1UECxNAd3d3LnZlcmlzaWduLmNvbS9DUFMgSW5jb3JwLmJ5IFJlZi4gTElBQklMSVRZIExURC4oYyk5NyBWZXJpU2lnbjAeFw0wOTEyMjkwMDAwMDBaFw0xMDEyMjkyMzU5NTlaMGMxCzAJBgNVBAYTAkZJMQ4wDAYDVQQIEwVFc3BvbzEOMAwGA1UEBxQFRXNwb28xDjAMBgNVBAoUBU5va2lhMQwwCgYDVQQLFANOQkkxFjAUBgNVBAMUDXZjcy5tYWVtby5vcmcwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvTLFoNmxF6DHCd8Tjfh7XunwGojJzi+bzYcEaLqHgS7+0C48vPXRC2QhrVt8YA0sNvbYrpk40u9BgcXay7sRMLuu+4c0lcfMAUqwE3LGeO7wgTwHRdIoRiVAv3OYYMk6+mTTHLnj6d30aK/+Gh95iSXL97WCk9kcM8DconM23LAgMBAAGjggGtMIIBqTAJBgNVHRMEAjAAMAsGA1UdDwQEAwIFoDA8BgNVHR8ENTAzMDGgL6AthitodHRwOi8vU1ZSSW50bC1jcmwudmVyaXNpZ24uY29tL1NWUkludGwuY3JsMEQGA1UdIAQ9MDswOQYLYIZIAYb4RQEHFwMwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTAoBgNVHSUEITAfBglghkgBhvhCBAEGCCsGAQUFBwMBBggrBgEFBQcDAjBxBggrBgEFBQcBAQRlMGMwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLnZlcmlzaWduLmNvbTA7BggrBgEFBQcwAoYvaHR0cDovL1NWUkludGwtYWlhLnZlcmlzaWduLmNvbS9TVlJJbnRsLWFpYS5jZXIwbgYIKwYBBQUHAQwEYjBgoV6gXDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYkaHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMA0GCSqGSIb3DQEBBQUAA4GBAF0OKv2ldfgcuJoZN6zdpTmR87SyL0Tme5HmVJIFeqpSxxXju7a+eU40JnVjV3TVXw9ZiCwlREauIfNEoK1PLHplEqOvm72bGoUrxcCGviQSIDxY1Io6+Iygo4v1Ob28nBW3NZtnq8VqlZ1+lFcZpSDswWgF8evNMmmrlCWrYshS
K 8
failures
V 1
8
K 15
svn:realmstring
V 25
https://vcs.maemo.org:443
END
EOF
svn export --non-interactive --quiet --force https://vcs.maemo.org/svn/mud-builder/trunk ~/mud-builder

[ -d ~/mud-builder ] || ( echo "MUD download failed!!!!" ; exit 1 )

cd ~/mud-builder

#
# Bring mud up to date
#
#patch -N -p0 <$SCRIPTS/field-match.patch

#
# Package files
#
# We must not attempt to apply the patches twice because the
# patches which create files will actually end up appending
# the contents to the already created file
[ -f packages/guile-1.8.xml ] || patch -N -p0 <~/v/mud-builder/packages.patch

#
# Calculate expected number of .debs
#
if [ $expected -eq 0 ]
then
  expected=`$SCRIPTS/expected "$@"`
fi

#
# Remove old downloads
#
rm ~/mud-builder/downloads/*

#$SCRIPTS/svn-to-http "$@"

# Fixup releases
[ -z "$release" ] || $SCRIPTS/modify-package-releases $release "$@"

# Remove obsolete packages
if [ $clean -ne 0 ]
then
  for p in \
   libsqlite0-dev libsqlite0 \
   libopencdk10-dbg libopencdk10-dev libopencdk10 \
   libopencdk8-dbg libopencdk8-dev libopencdk8 \
   libtasn1-3-dev libtasn1-3-dbg libtasn1-3-bin libtasn1-3 \
   libtasn1-2-dev libtasn1-2-dbg libtasn1-2-bin libtasn1-2 \
   libgnutls-dev libgnutls13-dbg libgnutlsxx13 libgnutls13 \
   libgnutls-dev libgnutls11-dbg libgnutlsxx11 libgnutls11 \
   libsoup2.2-8 libsoup2.2-dev \
   opensync-plugin-syncml libwbxml2-dev libwbxml2-0 libsyncml-dev libsyncml0 \
   msynctool opensync-plugin-file opensync-plugin-gpe \
   opensync-format-plugin-vformat libopensync-dev libopensync1 \
   gpesummary gpe-filemanager starling gpe-timesheet gpe-todo gpe-contacts gpe-calendar\
   libhandoff-dev libhandoff0 libxsettings-client-dev libxsettings-client0 \
   gpe-icons gpesyncd \
   libcontactsdb-dev libcontactsdb0 libgpevtype-dev libgpevtype1 \
   libtododb-dev libtododb0 libeventdb-dev libeventdb2 \
   libgpepimc-dev libgpepimc0 libgpewidget-dev libgpewidget1 \
   libmimedir-gnome-dev libmimedir-gnome0  libsoundgen-dev libsoundgen0 
    do
    apt-get --yes remove $p
  done
fi

# Install previous packages
[ -z "$cont" ] || fakeroot dpkg -i --force-depends ~/mud-builder/upload/*.deb
[ -z "$cont" ] || fakeroot dpkg -i --force-depends ~/v/sb-qemu$target/upload/*.deb

[ -f ~/mud-builder/build/sources.list ] && rm ~/mud-builder/build/sources.list

# HACK Workround bora problem
[ -f /etc/dpkg/shlibs.override ] || touch /etc/dpkg/shlibs.override

# HACK
[ -d /scratchbox/tools/share/aclocal ] && export ACLOCAL_FLAGS="$ACLOCAL_FLAGS -I /scratchbox/tools/share/aclocal"
compiler=`/scratchbox/tools/bin/sb-conf show -c`
[ -d /scratchbox/compilers/$compiler/arch_tools/share/aclocal/ ] && export ACLOCAL_FLAGS="$ACLOCAL_FLAGS -I /scratchbox/compilers/$compiler/arch_tools/share/aclocal/"
[ -d /scratchbox/devkits/doctools/share/aclocal/ ] && export ACLOCAL_FLAGS="$ACLOCAL_FLAGS -I /scratchbox/devkits/doctools/share/aclocal/"

# HACK to make MUD work on GREGALE and BORA
# Can be removed once gregale and bora are no longer being built
function dpkg-depcheck { perl /usr/bin/dpkg-depcheck "$@" ; } ; export -f dpkg-depcheck

# HACK to make dpkg-parsechangelog work on buggy systems
# Can be removed once UML bisect is done
#function dpkg-parsechangelog { perl $SCRIPTS/dpkg-parsechangelog "$@" ; } ; export -f dpkg-parsechangelog
mkdir ~/mud-builder/pcn-hack
cp $SCRIPTS/dpkg-parsechangelog ~/mud-builder/pcn-hack
echo exit >~/mud-builder/pcn-hack/sleep
chmod +x ~/mud-builder/pcn-hack/sleep
export PATH=$HOME/mud-builder/pcn-hack:$PATH

# HACK: check controllib
ls -l /usr/lib/dpkg/controllib.pl
sum /usr/lib/dpkg/controllib.pl
fgrep Format /usr/lib/dpkg/controllib.pl

mkdir -p ~/v/sb-qemu$target

[ -f ~/v/sb-qemu$target/upload/completed ] && rm -f ~/v/sb-qemu$target/upload/completed

# Do the build
# LD_BIND_NOW is to workround a ld.so bug which causes program execution to sometimes fail
#LD_BIND_NOW=1 $SCRIPTS/full-build $cont $date "$@" 2>&1 | tee ~/v/sb-qemu$target/qemu-build.log
$SCRIPTS/full-build $sdk $cont $date "$@" 2>&1 | 
 if [ $quiet -eq 0 ] ; then tee ~/v/sb-qemu$target/qemu-build.log ; else cat >~/v/sb-qemu$target/qemu-build.log ; fi

[ -n "$cont" ] || rm ~/v/sb-qemu$target/upload/*
mkdir ~/v/sb-qemu$target/upload
cp upload/* ~/v/sb-qemu$target/upload/

num=`ls -1 ~/v/sb-qemu$target/upload/*.deb | wc -l`
if [ $expected -gt 0 ]
then
  if [ $num -ne $expected ]
  then
    echo "*** Build for $* failed: expected $expected packages but got $num"
    echo "Logfile is ~/v/sb-qemu$target/qemu-build.log"
    ls ~/v/sb-qemu$target/upload/*.deb
    [ -f ~/v/sb-qemu$target/upload/completed ] && rm -f ~/v/sb-qemu$target/upload/completed
  else
    echo "Build for $* completed: found $num packages as expected"
    touch ~/v/sb-qemu$target/upload/completed
  fi
else
    echo "*** Build for $* completed: found $num packages"
    echo "Logfile is ~/v/sb-qemu$target/qemu-build.log"
    ls ~/v/sb-qemu$target/upload/*.deb
    [ -f ~/v/sb-qemu$target/upload/completed ] && rm -f ~/v/sb-qemu$target/upload/completed
fi

echo "$0 finished at `date`"
